type EmplyeeInfo {
  employee_id: ID!
  first_name: String!
  middle_name: String
  last_name: String!
  age: Int
  email: String!
  phone: String
  website: String
  pic: String
  address: Address
  applied_job: [AppliedJob]
}

type Address {
  address_id: ID!
  person_id: ID!
  line1: String!
  line2: String
  postal_code: String
  state: State!
}

type AppliedJob {
  job_id: ID!
  owner_id: ID!
  address: Address!
  date_applied: String!
}

type EmployerInfo {
  employer_id: ID!
  company_name: String!
  company_email: String!
  company_phone: String!
  company_address: Address!
  company_website: String
  timeline: [Timeline!]
  company_pic: String
  description: String
}

type PostedJob {
  job_id: ID!
  company_id: ID!
  job_title: String
  requirements: [String!]
  date_posted: String!
  location: Address!
  clicked_counts: Int
}

type Timeline {
  timeline_id: ID!
  company_id: ID!
  date: String!
  info: String!
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelEmplyeeInfoConnection {
  items: [EmplyeeInfo]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelEmplyeeInfoFilterInput {
  employee_id: ModelIDFilterInput
  first_name: ModelStringFilterInput
  middle_name: ModelStringFilterInput
  last_name: ModelStringFilterInput
  age: ModelIntFilterInput
  email: ModelStringFilterInput
  phone: ModelStringFilterInput
  website: ModelStringFilterInput
  pic: ModelStringFilterInput
  and: [ModelEmplyeeInfoFilterInput]
  or: [ModelEmplyeeInfoFilterInput]
  not: ModelEmplyeeInfoFilterInput
}

type Query {
  getEmplyeeInfo(id: ID!): EmplyeeInfo
  listEmplyeeInfos(filter: ModelEmplyeeInfoFilterInput, limit: Int, nextToken: String): ModelEmplyeeInfoConnection
  getAddress(id: ID!): Address
  listAddresss(filter: ModelAddressFilterInput, limit: Int, nextToken: String): ModelAddressConnection
  getAppliedJob(id: ID!): AppliedJob
  listAppliedJobs(filter: ModelAppliedJobFilterInput, limit: Int, nextToken: String): ModelAppliedJobConnection
  getEmployerInfo(id: ID!): EmployerInfo
  listEmployerInfos(filter: ModelEmployerInfoFilterInput, limit: Int, nextToken: String): ModelEmployerInfoConnection
  getPostedJob(id: ID!): PostedJob
  listPostedJobs(filter: ModelPostedJobFilterInput, limit: Int, nextToken: String): ModelPostedJobConnection
  getTimeline(id: ID!): Timeline
  listTimelines(filter: ModelTimelineFilterInput, limit: Int, nextToken: String): ModelTimelineConnection
}

input CreateEmplyeeInfoInput {
  employee_id: ID!
  first_name: String!
  middle_name: String
  last_name: String!
  age: Int
  email: String!
  phone: String
  website: String
  pic: String
}

input UpdateEmplyeeInfoInput {
  employee_id: ID
  first_name: String
  middle_name: String
  last_name: String
  age: Int
  email: String
  phone: String
  website: String
  pic: String
}

input DeleteEmplyeeInfoInput {
  id: ID
}

type Mutation {
  createEmplyeeInfo(input: CreateEmplyeeInfoInput!): EmplyeeInfo
  updateEmplyeeInfo(input: UpdateEmplyeeInfoInput!): EmplyeeInfo
  deleteEmplyeeInfo(input: DeleteEmplyeeInfoInput!): EmplyeeInfo
  createAddress(input: CreateAddressInput!): Address
  updateAddress(input: UpdateAddressInput!): Address
  deleteAddress(input: DeleteAddressInput!): Address
  createAppliedJob(input: CreateAppliedJobInput!): AppliedJob
  updateAppliedJob(input: UpdateAppliedJobInput!): AppliedJob
  deleteAppliedJob(input: DeleteAppliedJobInput!): AppliedJob
  createEmployerInfo(input: CreateEmployerInfoInput!): EmployerInfo
  updateEmployerInfo(input: UpdateEmployerInfoInput!): EmployerInfo
  deleteEmployerInfo(input: DeleteEmployerInfoInput!): EmployerInfo
  createPostedJob(input: CreatePostedJobInput!): PostedJob
  updatePostedJob(input: UpdatePostedJobInput!): PostedJob
  deletePostedJob(input: DeletePostedJobInput!): PostedJob
  createTimeline(input: CreateTimelineInput!): Timeline
  updateTimeline(input: UpdateTimelineInput!): Timeline
  deleteTimeline(input: DeleteTimelineInput!): Timeline
}

type Subscription {
  onCreateEmplyeeInfo: EmplyeeInfo @aws_subscribe(mutations: ["createEmplyeeInfo"])
  onUpdateEmplyeeInfo: EmplyeeInfo @aws_subscribe(mutations: ["updateEmplyeeInfo"])
  onDeleteEmplyeeInfo: EmplyeeInfo @aws_subscribe(mutations: ["deleteEmplyeeInfo"])
  onCreateAddress: Address @aws_subscribe(mutations: ["createAddress"])
  onUpdateAddress: Address @aws_subscribe(mutations: ["updateAddress"])
  onDeleteAddress: Address @aws_subscribe(mutations: ["deleteAddress"])
  onCreateAppliedJob: AppliedJob @aws_subscribe(mutations: ["createAppliedJob"])
  onUpdateAppliedJob: AppliedJob @aws_subscribe(mutations: ["updateAppliedJob"])
  onDeleteAppliedJob: AppliedJob @aws_subscribe(mutations: ["deleteAppliedJob"])
  onCreateEmployerInfo: EmployerInfo @aws_subscribe(mutations: ["createEmployerInfo"])
  onUpdateEmployerInfo: EmployerInfo @aws_subscribe(mutations: ["updateEmployerInfo"])
  onDeleteEmployerInfo: EmployerInfo @aws_subscribe(mutations: ["deleteEmployerInfo"])
  onCreatePostedJob: PostedJob @aws_subscribe(mutations: ["createPostedJob"])
  onUpdatePostedJob: PostedJob @aws_subscribe(mutations: ["updatePostedJob"])
  onDeletePostedJob: PostedJob @aws_subscribe(mutations: ["deletePostedJob"])
  onCreateTimeline: Timeline @aws_subscribe(mutations: ["createTimeline"])
  onUpdateTimeline: Timeline @aws_subscribe(mutations: ["updateTimeline"])
  onDeleteTimeline: Timeline @aws_subscribe(mutations: ["deleteTimeline"])
}

type ModelAddressConnection {
  items: [Address]
  nextToken: String
}

input ModelStateFilterInput {
  eq: State
  ne: State
}

input ModelAddressFilterInput {
  address_id: ModelIDFilterInput
  person_id: ModelIDFilterInput
  line1: ModelStringFilterInput
  line2: ModelStringFilterInput
  postal_code: ModelStringFilterInput
  state: ModelStateFilterInput
  and: [ModelAddressFilterInput]
  or: [ModelAddressFilterInput]
  not: ModelAddressFilterInput
}

input CreateAddressInput {
  address_id: ID!
  person_id: ID!
  line1: String!
  line2: String
  postal_code: String
  state: State!
}

input UpdateAddressInput {
  address_id: ID
  person_id: ID
  line1: String
  line2: String
  postal_code: String
  state: State
}

input DeleteAddressInput {
  id: ID
}

type ModelAppliedJobConnection {
  items: [AppliedJob]
  nextToken: String
}

input ModelAppliedJobFilterInput {
  job_id: ModelIDFilterInput
  owner_id: ModelIDFilterInput
  date_applied: ModelStringFilterInput
  and: [ModelAppliedJobFilterInput]
  or: [ModelAppliedJobFilterInput]
  not: ModelAppliedJobFilterInput
}

input CreateAppliedJobInput {
  job_id: ID!
  owner_id: ID!
  date_applied: String!
}

input UpdateAppliedJobInput {
  job_id: ID
  owner_id: ID
  date_applied: String
}

input DeleteAppliedJobInput {
  id: ID
}

type ModelEmployerInfoConnection {
  items: [EmployerInfo]
  nextToken: String
}

input ModelEmployerInfoFilterInput {
  employer_id: ModelIDFilterInput
  company_name: ModelStringFilterInput
  company_email: ModelStringFilterInput
  company_phone: ModelStringFilterInput
  company_website: ModelStringFilterInput
  company_pic: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelEmployerInfoFilterInput]
  or: [ModelEmployerInfoFilterInput]
  not: ModelEmployerInfoFilterInput
}

input CreateEmployerInfoInput {
  employer_id: ID!
  company_name: String!
  company_email: String!
  company_phone: String!
  company_website: String
  company_pic: String
  description: String
}

input UpdateEmployerInfoInput {
  employer_id: ID
  company_name: String
  company_email: String
  company_phone: String
  company_website: String
  company_pic: String
  description: String
}

input DeleteEmployerInfoInput {
  id: ID
}

type ModelPostedJobConnection {
  items: [PostedJob]
  nextToken: String
}

input ModelPostedJobFilterInput {
  job_id: ModelIDFilterInput
  company_id: ModelIDFilterInput
  job_title: ModelStringFilterInput
  requirements: ModelStringFilterInput
  date_posted: ModelStringFilterInput
  clicked_counts: ModelIntFilterInput
  and: [ModelPostedJobFilterInput]
  or: [ModelPostedJobFilterInput]
  not: ModelPostedJobFilterInput
}

input CreatePostedJobInput {
  job_id: ID!
  company_id: ID!
  job_title: String
  requirements: [String!]
  date_posted: String!
  clicked_counts: Int
}

input UpdatePostedJobInput {
  job_id: ID
  company_id: ID
  job_title: String
  requirements: [String!]
  date_posted: String
  clicked_counts: Int
}

input DeletePostedJobInput {
  id: ID
}

type ModelTimelineConnection {
  items: [Timeline]
  nextToken: String
}

input ModelTimelineFilterInput {
  timeline_id: ModelIDFilterInput
  company_id: ModelIDFilterInput
  date: ModelStringFilterInput
  info: ModelStringFilterInput
  and: [ModelTimelineFilterInput]
  or: [ModelTimelineFilterInput]
  not: ModelTimelineFilterInput
}

input CreateTimelineInput {
  timeline_id: ID!
  company_id: ID!
  date: String!
  info: String!
}

input UpdateTimelineInput {
  timeline_id: ID
  company_id: ID
  date: String
  info: String
}

input DeleteTimelineInput {
  id: ID
}
