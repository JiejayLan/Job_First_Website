type businessProfile {
  id: ID!
  business_name: String!
  description: String
  business_picture: String
  business_email: String
  business_phone_number: String
  Business_location: String
  timeline: [String]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelbusinessProfileConnection {
  items: [businessProfile]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelbusinessProfileFilterInput {
  id: ModelIDFilterInput
  business_name: ModelStringFilterInput
  description: ModelStringFilterInput
  business_picture: ModelStringFilterInput
  business_email: ModelStringFilterInput
  business_phone_number: ModelStringFilterInput
  Business_location: ModelStringFilterInput
  timeline: ModelStringFilterInput
  and: [ModelbusinessProfileFilterInput]
  or: [ModelbusinessProfileFilterInput]
  not: ModelbusinessProfileFilterInput
}

type Query {
  getBusinessProfile(id: ID!): businessProfile
  listBusinessProfiles(filter: ModelbusinessProfileFilterInput, limit: Int, nextToken: String): ModelbusinessProfileConnection
}

input CreateBusinessProfileInput {
  id: ID
  business_name: String!
  description: String
  business_picture: String
  business_email: String
  business_phone_number: String
  Business_location: String
  timeline: [String]
}

input UpdateBusinessProfileInput {
  id: ID!
  business_name: String
  description: String
  business_picture: String
  business_email: String
  business_phone_number: String
  Business_location: String
  timeline: [String]
}

input DeleteBusinessProfileInput {
  id: ID
}

type Mutation {
  createBusinessProfile(input: CreateBusinessProfileInput!): businessProfile
  updateBusinessProfile(input: UpdateBusinessProfileInput!): businessProfile
  deleteBusinessProfile(input: DeleteBusinessProfileInput!): businessProfile
}

type Subscription {
  onCreateBusinessProfile: businessProfile @aws_subscribe(mutations: ["createBusinessProfile"])
  onUpdateBusinessProfile: businessProfile @aws_subscribe(mutations: ["updateBusinessProfile"])
  onDeleteBusinessProfile: businessProfile @aws_subscribe(mutations: ["deleteBusinessProfile"])
}
